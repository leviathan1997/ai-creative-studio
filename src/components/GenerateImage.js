import React, { useState } from 'react';
import { Container, Form, Button, Spinner, Alert, Image } from 'react-bootstrap';
import { FaDownload } from 'react-icons/fa';

function GenerateImage() {
  const [prompt, setPrompt] = useState('');
  const [generatedImage, setGeneratedImage] = useState(null);
  const [textResponse, setTextResponse] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setGeneratedImage(null);
    setTextResponse(null);

    try {
      const response = await fetch('http://localhost:8000/generate-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt: prompt }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Failed to generate image.');
      }

      const data = await response.json();
      if (data.image) {
        setGeneratedImage(`data:image/png;base64,${data.image}`);
      } else if (data.text) {
        setTextResponse(data.text);
      } else {
        setError('No image or text data received, but request was successful.');
      }

    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container className="mt-5 p-4 shadow-lg rounded-3 glassmorphism-card">
      <h2 className="text-center mb-4 text-light fw-bold">Generate Image from Text</h2>
      <Form onSubmit={handleSubmit}>
        <Form.Group className="mb-3" controlId="imagePrompt">
          <Form.Label className="fw-bold text-light">Enter your prompt:</Form.Label>
          <Form.Control
            as="textarea"
            rows={4}
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="e.g., A futuristic city with flying cars and lush greenery. (Be descriptive for better results!)"
            required
            className="shadow-sm"
          />
        </Form.Group>
        <Button variant="success" type="submit" disabled={loading} className="w-100 py-2">
          {loading ? <><Spinner as="span" animation="border" size="sm" role="status" aria-hidden="true" /> Generating...</> : 'Generate'}
        </Button>
      </Form>

      {error && <Alert variant="danger" className="mt-4 shadow-sm">{error}</Alert>}

      {generatedImage && (
        <div className="mt-4 text-center p-3 border rounded-3 glassmorphism-card-inner shadow-sm">
          <h3 className="mb-1 text-light">Generated Image:</h3>
          <div className="image-with-download-wrapper position-relative d-inline-block">
            <Image src={generatedImage} alt="Generated by AI" fluid rounded style={{ maxHeight: '400px', width: 'auto', objectFit: 'contain' }} />
            <a href={generatedImage} download="generated_image.png" className="download-icon-btn">
              <FaDownload size={24} />
            </a>
          </div>
        </div>
      )}

      {textResponse && !generatedImage && (
        <div className="mt-4 p-3 border rounded-3 glassmorphism-card-inner shadow-sm">
          <h3 className="mb-3 text-light">Model Response:</h3>
          <Alert variant="info" className="mb-0">{textResponse}</Alert>
        </div>
      )}
    </Container>
  );
}

export default GenerateImage;